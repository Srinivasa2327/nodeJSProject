# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:
  someName: ''
  anotherName: '' 

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zap'
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'drop'
        publishLocation: 'pipeline'

- stage: DeployStaging
  displayName: Deploystaging
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: staging
    pool: 
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:

          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: dataui'
            inputs:
              azureSubscription: 'azconnection'
              appType: 'webAppLinux'
              appName: 'dataui'
              deployToSlotOrASE: true
              resourceGroupName: 'inlinemarket-exercise'
              slotName: 'staging'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'NODE|10.10'
              startUpCommand: 'npm run start'

          - powershell: |
                $envName="$(Environment.Name)"
                $pipeName="$(Build.DefinitionName)"
                $buildreason="$(Build.Reason)"
                echo $envName
                echo $resName


                $JSONBody = [PSCustomObject][Ordered]@{
                "@type" = "MessageCard"
                "@context" = "<http://schema.org/extensions>"
                "summary" = "Deployment to Staging Success"
                "themeColor" = '0078D7'
                "title" = "Deployment to Staging Success"
                "text" = "`n 
                EnvName: $($envName)`n
                Pipeline: $($pipeName)`n
                Reason: $($buildreason)
                "
                }

                $TeamMessageBody = ConvertTo-Json $JSONBody

                $parameters = @{
                "URI" = "https://inlinemarketevolutionoy.webhook.office.com/webhookb2/0da9231a-2d3c-4f8e-bda1-767017fbee8b@1e3ee4c0-94a9-45a4-9151-07e1858e6372/IncomingWebhook/471e30b85bff43fb97d37a5235b38799/4b3fb30e-1e8c-4832-be5d-df3bcd5271bc"
                "Method" = 'POST'
                "Body" = $TeamMessageBody
                "ContentType" = 'application/json'
                }

                Invoke-RestMethod @parameters
            condition: succeeded() 

          - powershell: |
                $envName="$(Environment.Name)"
                $pipeName="$(Build.DefinitionName)"
                $buildreason="$(Build.Reason)"
                echo $envName
                echo $resName


                $JSONBody = [PSCustomObject][Ordered]@{
                "@type" = "MessageCard"
                "@context" = "<http://schema.org/extensions>"
                "summary" = "Deployment to Staging Success"
                "themeColor" = '0078D7'
                "title" = "Deployment to Staging Failed"
                "text" = "`n 
                EnvName: $($envName)`n
                Pipeline: $($pipeName)`n
                Reason: $($buildreason)
                "
                }

                $TeamMessageBody = ConvertTo-Json $JSONBody

                $parameters = @{
                "URI" = "https://inlinemarketevolutionoy.webhook.office.com/webhookb2/0da9231a-2d3c-4f8e-bda1-767017fbee8b@1e3ee4c0-94a9-45a4-9151-07e1858e6372/IncomingWebhook/471e30b85bff43fb97d37a5235b38799/4b3fb30e-1e8c-4832-be5d-df3bcd5271bc"
                "Method" = 'POST'
                "Body" = $TeamMessageBody
                "ContentType" = 'application/json'
                }

                Invoke-RestMethod @parameters
            condition: failed()

- stage: DeployProd
  displayName: DeployProd
  dependsOn: DeployStaging
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: prod
    pool: 
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
        
          steps:            
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: 'azconnection'
              Action: 'Swap Slots'
              WebAppName: 'dataui'
              ResourceGroupName: 'inlinemarket-exercise'
              SourceSlot: 'staging'

     