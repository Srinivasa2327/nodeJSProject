# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'drop'
        publishLocation: 'pipeline'

- stage: DeployStaging
  displayName: Deploystaging
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: staging
    pool: 
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:            
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: dataui'
            inputs:
              azureSubscription: 'azconnection'
              appType: 'webAppLinux'
              appName: 'dataui'
              deployToSlotOrASE: true
              resourceGroupName: 'inlinemarket-exercise'
              slotName: 'staging'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'NODE|10.10'
              startUpCommand: 'npm run start'

  - job: NotifySuccess
    dependsOn: Deploy
    condition: succeeded()
    pool:
      vmImage: ubuntu-latest

    steps:

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'drop'
          targetPath: '$(Pipeline.Workspace)'

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '$(Pipeline.Workspace)/$(Build.BuildId).zip'
          destinationFolder: '$(Pipeline.Workspace)'
          cleanDestinationFolder: true
          overwriteExistingFiles: true

      - task: AzurePowerShell@5
        inputs:
          azureSubscription: 'azconnection'
          ScriptType: 'FilePath'
          ScriptPath: '$(Pipeline.Workspace)/Notifications.ps1'
          ScriptArguments: '-envName $(Environment.Name) -status $(Environment.Name)'
          azurePowerShellVersion: 'LatestVersion'

- stage: DeployProd
  displayName: DeployProd
  dependsOn: DeployStaging
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: prod
    pool: 
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
        
          steps:            
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: 'azconnection'
              Action: 'Swap Slots'
              WebAppName: 'dataui'
              ResourceGroupName: 'inlinemarket-exercise'
              SourceSlot: 'staging'
